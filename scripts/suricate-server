#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import socket
import datetime
import requests
from subprocess import check_output, STDOUT
from suricate import server
from suricate.configuration import config
from argparse import ArgumentParser, FileType

import redis
import yaml


parser = ArgumentParser(description='http://suricate.readthedocs.org/')
parser.add_argument(
    '-f',
    '--file',
    type=FileType(),
    help='Configuration file'
)
parser.add_argument('--no_components', action='store_true')
parser.add_argument('action', choices=['start', 'stop'])
args = parser.parse_args()

try:
    config = yaml.safe_load(args.file) if args.file else config
    COMPONENTS = config['COMPONENTS']
    PORT = config['HTTP']['port']
    BASEURL = config['HTTP']['baseurl']
except KeyError, ex:
    print('ERROR: can not load %s from configuration' % str(ex))
    sys.exit(1)
except Exception:
    print('ERROR: can not properly load the configuration')
    sys.exit(1)


if args.action == 'start':
    # Check if suricate is already running
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind(('127.0.0.1', 54123))
    except socket.error:
        print('ERROR: suricate is already running')
        sys.exit(1)
    if args.no_components:
        server.start()
    else:
        server.start(COMPONENTS)
elif args.action == 'stop' and args.no_components:
    # It is a nonsense to execute stop with no_components
    print('ERROR: can not execute stop with no_components')
    sys.exit(1)
else:
    url = '%s:%d/publisher/api/v0.1/stop' % (BASEURL, PORT)
    msg = ''
    try:
        requests.post(url)
        print('A "stop" request has been sent to the server')
    except requests.exceptions.ConnectionError:
        print('The server was already stopped...')
